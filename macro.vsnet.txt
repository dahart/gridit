Imports System
Imports EnvDTE
Imports EnvDTE80
Imports System.Diagnostics

Public Module Module1


    Public Sub SearchGoogleForSelectedText()
        Dim s As String = ActiveWindowSelection().Trim()
        If s.Length > 0 Then
            Diagnostics.Process.Start("http://www.google.com/search?q=" & _
                Web.HttpUtility.UrlEncode(s))
        End If
    End Sub

    Private Function ActiveWindowSelection() As String
        If DTE.ActiveWindow.ObjectKind = EnvDTE.Constants.vsWindowKindOutput Then
            Return OutputWindowSelection()
        End If
        If DTE.ActiveWindow.ObjectKind = "{57312C73-6202-49E9-B1E1-40EA1A6DC1F6}" Then
            Return HTMLEditorSelection()
        End If
        Return SelectionText(DTE.ActiveWindow.Selection)
    End Function

    Private Function HTMLEditorSelection() As String
        Dim hw As HTMLWindow = ActiveDocument.ActiveWindow.Object
        Dim tw As TextWindow = hw.CurrentTabObject
        Return SelectionText(tw.Selection)
    End Function

    Private Function OutputWindowSelection() As String
        Dim w As Window = DTE.Windows.Item(EnvDTE.Constants.vsWindowKindOutput)
        Dim ow As OutputWindow = w.Object
        Dim owp As OutputWindowPane = ow.OutputWindowPanes.Item(ow.ActivePane.Name)
        Return SelectionText(owp.TextDocument.Selection)
    End Function

    Private Function SelectionText(ByVal sel As EnvDTE.TextSelection) As String
        If sel Is Nothing Then
            Return ""
        End If
        If sel.Text.Length = 0 Then
            SelectWord(sel)
        End If
        If sel.Text.Length <= 2 Then
            Return ""
        End If
        Return sel.Text
    End Function

    Private Sub SelectWord(ByVal sel As EnvDTE.TextSelection)
        Dim leftPos As Integer
        Dim line As Integer
        Dim pt As EnvDTE.EditPoint = sel.ActivePoint.CreateEditPoint()

        sel.WordLeft(True, 1)
        line = sel.TextRanges.Item(1).StartPoint.Line
        leftPos = sel.TextRanges.Item(1).StartPoint.LineCharOffset
        pt.MoveToLineAndOffset(line, leftPos)
        sel.MoveToPoint(pt)
        sel.WordRight(True, 1)
    End Sub

    Function GetOutputWindow() As OutputWindow
        Return DTE.Windows.Item(Constants.vsWindowKindOutput).Object()
    End Function

    Function GetActivePane() As OutputWindowPane
        Return GetOutputWindow.ActivePane
    End Function

    Private Sub ErrToOutputWindow(ByVal ex As Exception, ByVal Guid As String)
        '' Create a tool window handle for the Output window.
        'Dim win As Window = _
        '    applicationObject.Windows.Item(EnvDTE.Constants.vsWindowKindOutput)

        '' Access the Output window.
        'Dim OW As OutputWindow = win.Object
        '' Add a new pane to the Output window.
        'Dim OWp As OutputWindowPane = _
        '    OW.OutputWindowPanes.Add("Debug")

        Dim OWp As OutputWindowPane = GetActivePane()

        ' Write exception text to this new pane.
        OWp.OutputString(ex.ToString())
    End Sub


    'Public Sub LineUpText()
    '    Dim myProcess As New Process()
    '    Dim myProcessStartInfo As New ProcessStartInfo("Process_StandardOutput_Sample.exe")
    '    myProcessStartInfo.UseShellExecute = False
    '    myProcessStartInfo.RedirectStandardInput = True
    '    myProcessStartInfo.RedirectStandardOutput = True
    '    myProcessStartInfo.RedirectStandardError = True
    '    myProcess.StartInfo = myProcessStartInfo

    '    ' Run the process.
    '    Dim fStarted As Boolean = myProcess.Start()
    '    If Not fStarted Then _
    '    Throw New Exception("Unable to start " + +" process.")

    '    myProcess.Start()

    '    Dim myErrStreamReader As StreamReader = myProcess.StandardOutput
    '    Dim myOutStreamReader As StreamReader = myProcess.StandardOutput
    '    Dim myStreamWriter As StreamWriter = myProcess.StandardInput

    '    ' Read the standard output of the spawned process.
    '    Dim myString As String = myStreamReader.ReadLine()
    '    Console.WriteLine(myString)
    '    myProcess.Close()
    'End Sub



    ' How to redirect standard output
    'Dim myProcess As New Process()
    'Dim myProcessStartInfo As New ProcessStartInfo("Process_StandardOutput_Sample.exe")
    '    myProcessStartInfo.UseShellExecute = False
    '    myProcessStartInfo.RedirectStandardOutput = True
    '    myProcess.StartInfo = myProcessStartInfo
    '    myProcess.Start()

    'Dim myStreamReader As StreamReader = myProcess.StandardOutput
    '' Read the standard output of the spawned process.
    'Dim myString As String = myStreamReader.ReadLine()
    '    Console.WriteLine(myString)
    '    myProcess.Close()




    ' How to redirect standard input
    ' http://msdn.microsoft.com/en-us/library/system.diagnostics.process.standardinput.aspx
    '    Imports System
    'Imports System.IO
    'Imports System.Diagnostics
    'Imports System.ComponentModel
    'Imports Microsoft.VisualBasic

    'Namespace Process_StandardInput_Sample

    '        Class StandardInputTest

    '            Shared Sub Main()

    '                Console.WriteLine("Ready to sort one or more text lines...")

    '                ' Start the Sort.exe process with redirected input.
    '                ' Use the sort command to sort the input text.
    '                Dim myProcess As New Process()

    '                myProcess.StartInfo.FileName = "Sort.exe"
    '                myProcess.StartInfo.UseShellExecute = False
    '                myProcess.StartInfo.RedirectStandardInput = True

    '                myProcess.Start()

    '                Dim myStreamWriter As StreamWriter = myProcess.StandardInput

    '                ' Prompt the user for input text lines to sort. 
    '                ' Write each line to the StandardInput stream of
    '                ' the sort command.
    '                Dim inputText As String
    '                Dim numLines As Integer = 0
    '                Do
    '                    Console.WriteLine("Enter a line of text (or press the Enter key to stop):")

    '                    inputText = Console.ReadLine()
    '                    If inputText.Length > 0 Then
    '                        numLines += 1
    '                        myStreamWriter.WriteLine(inputText)
    '                    End If
    '                Loop While inputText.Length <> 0


    '                ' Write a report header to the console.
    '                If numLines > 0 Then
    '                    Console.WriteLine(" {0} sorted text line(s) ", numLines)
    '                    Console.WriteLine("------------------------")
    '                Else
    '                    Console.WriteLine(" No input was sorted")
    '                End If

    '                ' End the input stream to the sort command.
    '                ' When the stream closes, the sort command
    '                ' writes the sorted text lines to the 
    '                ' console.
    '                myStreamWriter.Close()


    '                ' Wait for the sort process to write the sorted text lines.
    '                myProcess.WaitForExit()
    '                myProcess.Close()

    '            End Sub 'Main
    '        End Class  'StandardInputTest
    '    End Namespace 'Process_StandardInput_Sample


    'Public Sub LineUpText()
    '    Dim s As String = ActiveWindowSelection()
    '    If s.Length > 0 Then
    '        Diagnostics.Process.Start("http://www.google.com/search?q=" & _
    '            Web.HttpUtility.UrlEncode(s))
    '    End If
    'End Sub



    ' Dim myProcess As System.Diagnostics.Process = _
    '   New System.Diagnostics.Process()
    'myProcess.StartInfo.FileName = _
    '   "c:\somepath\somefile.txt"
    'myProcess.StartInfo.WindowStyle = _
    '   System.Diagnostics.ProcessWindowStyle.Normal
    'myProcess.Start



    'Private Sub btnWaitForExit_Click( _
    '  ByVal sender As System.Object, _
    '  ByVal e As System.EventArgs) _
    '  Handles btnWaitForExit.Click

    '    ' create a new process
    '    Dim myProcess As Process = _
    '       System.Diagnostics.Process.Start("sample.txt")

    '    ' wait until it exits
    '    myProcess.WaitForExit()

    '    ' display results
    '    MessageBox.Show("Notepad was closed at: " & _
    '       myProcess.ExitTime & "." & _
    '       System.Environment.NewLine & "Exit Code: " & _
    '       myProcess.ExitCode)
    '    myProcess.Close()
    'End Sub




    ' http://www.devx.com/dotnet/Article/7914/0/page/3
    ' Dim myProcess As Process = New Process()
    ' Dim s As String
    ' Dim outfile As String = Application.StartupPath & _
    '    "\dirOutput.txt"

    ' ' get the System path
    ' Dim sysFolder As String = _
    '    System.Environment.GetFolderPath _
    '    (Environment.SpecialFolder.System)

    ' ' set the file name and the command line args
    'myProcess.StartInfo.FileName = "cmd.exe"
    'myProcess.StartInfo.Arguments = "/C cd " & _
    '   sysFolder & " && dir *.com >> " & Chr(34) & _
    '   outfile & Chr(34) & " && exit"

    ' ' start the process in a hidden window
    'myProcess.StartInfo.WindowStyle = _
    '   ProcessWindowStyle.Hidden
    'myProcess.StartInfo.CreateNoWindow = True
    'myProcess.Start()

    ' ' if the process doesn't complete within
    ' ' 1 second, kill it
    'myProcess.WaitForExit(1000)
    'If Not myProcess.HasExited Then
    '   myProcess.Kill()
    'End If

    ' ' display exit time and exit code
    'MessageBox.Show("The 'dir' command window was " & _]
    '   "closed at: " & myProcess.ExitTime & "." & _
    '   System.Environment.NewLine & "Exit Code: " & _
    '   myProcess.ExitCode)
    'myProcess.Close()





    ' http://msdn.microsoft.com/en-us/library/aa289176(VS.71).aspx

    Sub Macro1()
        'Dim EnvString As String
        'Indx = 1
        'Do
        '    EnvString = Environ(Indx)
        '    'Cells(Indx, 1) = EnvString
        '    ErrToOutputWindow(EnvString);
        '    ErrToOutputWindow("JackAssz");
        '    Indx = Indx + 1
        'Loop Until EnvString = ""

        'Get the selected text
        Dim doc As Document = DTE.ActiveDocument
        Dim sel As TextSelection = doc.Selection
        Dim selectedText As String = sel.Text

        'sel.Text = "JackAssz"
        ErrToOutputWindow("JackAssz")

        'Diagnostics.Process.Start("http://www.dahart.com/")

    End Sub

    ' examples:
    ' http://msdn.microsoft.com/en-us/library/aa289176(VS.71).aspx

    'Sub LineUpText()
    '    'ByVal Guid As String, _
    '    'ByVal ID As Integer, 
    '    'ByVal CustomIn As Object, _
    '    'ByVal CustomOut As Object, 
    '    'ByRef CancelDefault As Boolean
    '    ') 
    '    '_ Handles CommandEvents.BeforeExecute
    '    ' Indicate that we've handled this command event,
    '    '   so there is no need to pass the event on.
    '    'CancelDefault = True

    '    Try

    '        'From: http://www.ondotnet.com/pub/a/dotnet/2005/06/20/macrorefactor.html
    '        'Get the selected text
    '        Dim doc As Document = DTE.ActiveDocument
    '        Dim sel As TextSelection = doc.Selection
    '        Dim selectedText As String = sel.Text

    '        '            Dim doc As Document = _
    '        'applicationObject.Documents.Item(CustomIn)
    '        '            Dim td As TextDocument = _
    '        'CType(doc.Object("TextDocument"), TextDocument)

    '        '            Dim sp As TextPoint = td.StartPoint
    '        '            Dim ep As TextPoint = td.EndPoint
    '        '            Dim editStartPt As EditPoint = sp.CreateEditPoint()
    '        '            Dim editEndPt As EditPoint = ep.CreateEditPoint()

    '        '            ' Get content of the document.
    '        '            Dim txtHTMLDoc As String = editStartPt.GetText(editEndPt)


    '        ' Set up process info.
    '        Dim psi As New System.Diagnostics.ProcessStartInfo
    '        psi.FileName = "d:/depot/bin/python.bat"
    '        psi.Arguments = Environ("UtilScripts") & "/lineup.py"
    '        psi.CreateNoWindow = True
    '        psi.UseShellExecute = False
    '        psi.RedirectStandardInput = True
    '        psi.RedirectStandardOutput = True
    '        psi.RedirectStandardError = True

    '        ' Create the process.
    '        Dim p As New System.Diagnostics.Process

    '        ' Associate process info with the process.
    '        p.StartInfo = psi

    '        ' Run the process.
    '        Dim fStarted As Boolean = p.Start()
    '        If Not fStarted Then _
    '            Throw New Exception("Unable to start " & psi.FileName & " process.")

    '        ' Set up streams to interact with process's stdin/stdout.
    '        Dim sw As StreamWriter = p.StandardInput
    '        Dim sr As StreamReader = p.StandardOutput
    '        Dim strFormattedDoc As String = Nothing

    '        ' Write content of HTML document to process's stdin.
    '        sw.Write(selectedText)
    '        sw.Close()

    '        ' Read process's stdout and store in strFormattedDoc.
    '        strFormattedDoc = sr.ReadToEnd()
    '        sr.Close()

    '        ' Handle no stdout text, instead display error text.
    '        If strFormattedDoc = "" Then
    '            Dim srError As StreamReader = p.StandardError
    '            Dim strError As String = srError.ReadToEnd()
    '            srError.Close()
    '            Throw New Exception(psi.FileName & " failed with error " _
    '                & "information: " & strError)
    '        End If

    '        ' Replace document's original text with process's output.
    '        'editStartPt.ReplaceText(editEndPt, strFormattedDoc, _
    '        'CInt(vsEPReplaceTextOptions.vsEPReplaceTextTabsSpaces))
    '        selectedText = strFormattedDoc.ToString();

    '    Catch ex As Exception
    '        'System.Windows.Forms.MessageBox.Show(ex.ToString())
    '        ErrToOutputWindow(ex)
    '    End Try
    'End Sub

End Module

